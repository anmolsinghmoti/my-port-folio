"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Carousel = void 0;
var React = require("react");
var touchsweep_1 = require("touchsweep");
var Carousel = function (props) {
    var itemWidth = props.itemWidth;
    var len = props.items.length;
    var radius = Math.round((itemWidth || 210) / 2 / Math.tan(Math.PI / len));
    var theta = 360 / len;
    var ref = React.useRef(null);
    var _a = React.useState(0), selectedIndex = _a[0], setSelectedIndex = _a[1];
    var getSlideStyle = function (index) {
        var style = {};
        if (index < len) {
            var cellAngle = theta * index;
            style.opacity = 1;
            style.transform = "rotateY(".concat(cellAngle, "deg) translateZ(").concat(radius, "px)");
        }
        else {
            style.opacity = 0;
            style.transform = 'none';
        }
        return style;
    };
    var getItemStyle = function () {
        var angle = theta * selectedIndex * -1;
        return {
            transform: "translateZ(".concat(-1 * radius, "px) rotateY(").concat(angle, "deg)")
        };
    };
    var getClassName = function (parts) {
        return Array.isArray(parts)
            ? parts.map(function (part) { return "".concat(props.classNamePrefix).concat(part); }).join(' ')
            : "".concat(props.classNamePrefix).concat(parts);
    };
    var prev = function () { return setSelectedIndex(selectedIndex - 1); };
    var next = function () { return setSelectedIndex(selectedIndex + 1); };
    React.useEffect(function () {
        var area = ref === null || ref === void 0 ? void 0 : ref.current;
        var touchsweep = new touchsweep_1.default(area || undefined);
        area === null || area === void 0 ? void 0 : area.addEventListener('swipeleft', next);
        area === null || area === void 0 ? void 0 : area.addEventListener('swiperight', prev);
        return function () {
            touchsweep.unbind();
            area === null || area === void 0 ? void 0 : area.removeEventListener('swipeleft', next);
            area === null || area === void 0 ? void 0 : area.removeEventListener('swiperight', prev);
        };
    });
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { className: getClassName(''), ref: ref },
            React.createElement("div", { className: getClassName('__container'), style: getItemStyle() }, props.items.map(function (item, index) { return (React.createElement("div", { className: getClassName('__slide'), key: index, style: getSlideStyle(index) },
                React.createElement("img", { src: item.image, alt: item.alt }),
                React.createElement("div", { className: getClassName('__slide-overlay') }, item.content))); }))),
        props.showControls && (React.createElement("div", { className: getClassName('__controls') },
            React.createElement("button", { className: getClassName(['__control', '__control--prev']), onClick: prev }, props.prevButtonContent),
            React.createElement("button", { className: getClassName(['__control', '__control--next']), onClick: next }, props.nextButtonContent)))));
};
exports.Carousel = Carousel;
exports.Carousel.defaultProps = {
    itemWidth: 210,
    showControls: true,
    classNamePrefix: 'carousel',
    prevButtonContent: 'Previous',
    nextButtonContent: 'Next'
};
exports.default = exports.Carousel;
